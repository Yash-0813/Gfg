class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        ArrayList<Integer>order=new ArrayList<>();
        
        int[] inDegree=new int[V];
        for(int currentVertex=0;currentVertex<V;currentVertex++){
            for(int currentNeigh:adj.get(currentVertex)){
                inDegree[currentNeigh]+=1;
            }
        }
        
        Queue<Integer>queue=new LinkedList<>();
        for(int currentVertex=0;currentVertex<V;currentVertex++){
            if(inDegree[currentVertex]==0){
                queue.add(currentVertex);
            }
        }
        
        boolean[] visited=new boolean[V];
        
        while(!queue.isEmpty()){
            int currentVertex=queue.remove();
            
            if(visited[currentVertex]){
                continue;
            }
            
            order.add(currentVertex);
            visited[currentVertex]=true;
            
            for(int currentNeigh:adj.get(currentVertex)){
                inDegree[currentNeigh]-=1;
                
                if(inDegree[currentNeigh]==0){
                    queue.add(currentNeigh);
                }
            }
            
        }
        if(order.size()!=V){
            return new int[]{0};
        }
        
        //Collections.reverse(order);
        int[] answer=new int[V];
        
        for(int i=0;i<V;i++){
            answer[i]=order.get(i);
        }
        return answer;
    }
}
