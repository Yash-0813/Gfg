class Solution:
    
    #Function to find minimum number of pages.
    def findPages(self,A, N, M):
        totalsum=0
        for i in A:
            totalsum+=i
        start=0
        end=int(totalsum)
        ans=-1
        
        while(start<=end):
            mid=start+(end-start)//2
            if(self.isPossible(A,N,M,mid)):
                ans=mid
                end=mid-1
            else:
                start=mid+1
        
        return ans
        
        
    def isPossible(self,pages,n,m,boundval):
        studentcount=1
        currentsum=0
        
        for currentpage in pages:
            if(currentpage>boundval):
                return False
            if(currentpage+currentsum<=boundval):
                currentsum+=currentpage
            else:
                studentcount+=1
                currentsum=currentpage
                if(studentcount>m):
                    return False
        return True





----------------------------------------JAVA----------------------------------------------------JAVA-----------------------------------------------------------------

class Solution 
{
    //Function to find minimum number of pages.
    public static int findPages(int[]A,int N,int M)
    {
        //Your code here
        long totalsum=0;
        
        for(int i:A){
            totalsum+=i;
        }
        int start=0;
        
        int end=(int)totalsum;
        
        int answer=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            
            if(isPossible(A,N,M,mid)){
                answer=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return answer;
    }
    public static boolean isPossible(int[] pages, int n, int m,int boundVal){
        int studentcount=1;
        int currentsum=0;
        
        for(int currentpages:pages){
            if(currentpages>boundVal){
                return false;
            }
            
            if(currentpages+currentsum<=boundVal){
                currentsum+=currentpages;
            }
            else{
                studentcount+=1;
                currentsum=currentpages;
                
                if(studentcount>m){
                    return false;
                }
            }
    }
        return true;
    }
};
