class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited=new boolean[V];
        HashSet<Integer>recStack=new HashSet<>();
        
        for(int currentVertex=0;currentVertex<V;currentVertex++){
            if(!visited[currentVertex] && hasCycle(adj,currentVertex,recStack,visited)){
                return true;
            }
        }
        return false;
    }
    private static boolean hasCycle(ArrayList<ArrayList<Integer>> adj,int currentVertex,Set<Integer>recStack,boolean[] visited){
        
        visited[currentVertex]=true;
        recStack.add(currentVertex);
        
        ArrayList<Integer>neighbours=adj.get(currentVertex);
        
        for(int currentNeigh:neighbours){
            if(visited[currentNeigh]==false){
               if(hasCycle(adj,currentNeigh,recStack,visited)){
                    return true;
            }
            }
            else if (recStack.contains(currentNeigh)){
                return true;
            }
        }
        recStack.remove(currentVertex);
        return false;
    }
}



----------------------------------------------------------------BY Kahn's Algorithm-----------------------------------------------------------------------------------

class Solution {
    // by Kahn's Algorithm
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        int[] indegree=new int[V];
        Queue<Integer>queue=new LinkedList<>();
        boolean[] visited= new boolean[V];
        int visitedVertices=0;
        for(int i=0;i<V;i++){
            for(int currentNeigh:adj.get(i)){
                indegree[currentNeigh]+=1;
            }
        }
        
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                queue.add(i);
            }
        }
        
        while(!queue.isEmpty()){
            int currentVertex=queue.remove();
            
            if(visited[currentVertex]){
                continue;
            }
            
            visited[currentVertex]=true;
            visitedVertices+=1;
            
            for(int currentNeigh:adj.get(currentVertex)){
                indegree[currentNeigh]-=1;
                
                if(indegree[currentNeigh]==0){
                    queue.add(currentNeigh);
                }
            }
            
        }
        return !(visitedVertices==V);
    }
}
