class solver
{
    static int[] print_next_greater_freq(int arr[], int n)
    {
        Stack<Integer>stack=new Stack<>();
        int[]ans=new int[n];
        HashMap<Integer,Integer>memo=new HashMap<Integer,Integer>();
        for(int i=0;i<n;i++){
            if(memo.containsKey(arr[i])){
                memo.put(arr[i],memo.get(arr[i])+1);
            }
            else{
                memo.put(arr[i],1);
            }
        }
        int j=arr.length-1;
        for(int i=arr.length-1;i>=0;i--){
            int currentval=arr[i];
            while(!stack.isEmpty() && memo.get(stack.peek())<=memo.get(currentval)){
                stack.pop();
            }
            if(stack.isEmpty()){
                ans[j]=-1;
                j--;
            }
            else{
                ans[j]=stack.peek();
                j--;
            }
            stack.push(currentval);
        }
        return ans;
    }
}
