class Solution
{
    public int LongestRepeatingSubsequence(String str)
    {
        int[][] dp = new int[str.length()][str.length()];
        for(int[] a:dp){
            Arrays.fill(a,-1);
        }

        return lcs(str,str,0,0,dp);
    }
    public int lcs(String t1,String t2,int l1,int l2,int[][] dp){
        if(l1 >= t1.length() || l2 >= t2.length()){
            return 0;
        }
        
        if(dp[l1][l2] != -1)
        return dp[l1][l2];

        int take = 0,notake=0;
        if(t1.charAt(l1)== t2.charAt(l2) && l1!=l2){
            take = 1+lcs(t1,t2,l1+1,l2+1,dp);
        }
        else
        notake = Math.max(lcs(t1,t2,l1+1,l2,dp),lcs(t1,t2,l1,l2+1,dp));

        return dp[l1][l2] = Math.max(take,notake);
        
    }
}
