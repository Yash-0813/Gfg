class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited=new boolean[V];
        for(int currentvertex=0;currentvertex<V;currentvertex++){
            if(!visited[currentvertex]){
                if(hasCycle(adj,currentvertex,-1,visited)){
                    return true;
                }
            }
        }
        return false;
    }
    private boolean hasCycle(ArrayList<ArrayList<Integer>> adj,int currentVertex,int currentParent,boolean[] visited){
        visited[currentVertex]=true;
        for(int currentNeigh:adj.get(currentVertex)){
            if(visited[currentNeigh]==false){
                if(hasCycle(adj,currentNeigh,currentVertex,visited)){
                    return true;
                }
                
            }
            else if (currentNeigh!=currentParent){
                return true;
            }
        }
        return false;
    }
}
