import collections
class Solution:
    def bottomView(self, root):
        # code here
        answer=[]
        queue=collections.deque()
        memo={}
        left=10000000000
        right=-1000000000
        
        if(right==None):
            return answer
        queue.append((root,0))
        while(queue):
            currentnode,currenthd=queue.popleft()
            left=min(left,currenthd)
            right=max(right,currenthd)
            
            
            memo[currenthd]=currentnode.data
            if(currentnode.left!=None):
                queue.append((currentnode.left,currenthd-1))
            if(currentnode.right!=None):
                queue.append((currentnode.right,currenthd+1))
        for i in range(left,right+1):
            answer.append(memo[i])
        return answer



--------------------------------------------------------------JVAa USING BFS------------------------------------------------------------------------------------------


class Pair{
    int hd;
    Node treenode;
    
    Pair(Node treenode,int hd){
        this.treenode=treenode;
        this.hd=hd;
    }
}
class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        Queue<Pair> q = new LinkedList<>();
        ArrayList<Integer> ans = new ArrayList<>();
        
        HashMap<Integer,Integer> hm = new HashMap<>();
        int mind = Integer.MAX_VALUE;
        int maxd=Integer.MIN_VALUE;
        
        q.add(new Pair(root,0));
        
        while(!q.isEmpty()){
            
            int size=q.size();
            
            while(size-->0){
                Pair currpair = q.remove();
                Node currnode = currpair.treenode;
                int hd=currpair.hd;
                hm.put(hd,currnode.data);
                mind=Math.min(mind,hd);
                maxd=Math.max(maxd,hd);
                
                if(currnode.left!=null){
                    q.add(new Pair(currnode.left,hd-1));
                }
                if(currnode.right!=null){
                    q.add(new Pair(currnode.right,hd+1));
                }
                
            }
        }
            
            for(int i=mind;i<=maxd;i++){
                ans.add(hm.get(i));
            }
        
        return ans;
    }
}
