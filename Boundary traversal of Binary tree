class Solution
{
  ArrayList <Integer> boundary(Node node)
  {
      ArrayList<Integer> ans = new ArrayList<>();
      
      if(!isLeaf(node))
      ans.add(node.data);
      
      addleft(node,ans);
      addleaf(node,ans);
      addright(node,ans);
      
      return ans;
  }
  
  boolean isLeaf(Node root){
      if(root.left == null && root.right == null)
      return true;
      
      return false;
  }
  
  void addleft(Node root,ArrayList<Integer> ans){
      Node curr = root.left;
      while(curr != null){
          if(!isLeaf(curr))
              ans.add(curr.data);
         
         if(curr.left != null)
         curr = curr.left;
         else
         curr = curr.right;
      }
  }
  
  void addright(Node root,ArrayList<Integer> ans){
      Node curr = root.right;
      ArrayList<Integer> temp = new ArrayList<>();
      
      while(curr != null){
          if(!isLeaf(curr))
              temp.add(curr.data);
         
         if(curr.right != null)
         curr = curr.right;
         else
         curr = curr.left;
     }
     
     for(int i=temp.size()-1; i>=0; i--){
         ans.add(temp.get(i));
     }
  }
  
  void addleaf(Node root,ArrayList<Integer> ans){
      if(isLeaf(root)){
      ans.add(root.data);
      return ;
      }
      
      if (root.left != null) addleaf(root.left, ans);
        if (root.right != null) addleaf(root.right, ans);
    
  }
}
