class Edge implements Comparable<Edge>{
    int src;
    int dest;
    int weight;
    
    Edge(int src,int dest,int weight){
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }
    
    public int compareTo(Edge other){
        return this.weight - other.weight;
    }
}
class Solution{
    public static int findParent(int[] parent,int a){
        if(parent[a] == a)
            return a;
        
        return findParent(parent,parent[a]);
    }
    
    public static void union(int[] parent,int a,int b){
        int rootA = findParent(parent,a);
        int rootB = findParent(parent,b);
        
        parent[rootA] = rootB;
        return;
    }
    
    public static int findParentByPathCompression(int[] parent,int a){
        if(parent[a]==a)
            return a;
        
        else 
            parent[a] = findParentByPathCompression(parent,parent[a]);
        
        return parent[a];
    }
    
    public static void unionByRank(int[] parent,int[] rank,int a,int b){
        int rootA = findParentByPathCompression(parent,a);
        int rootB = findParentByPathCompression(parent,b);
        
        if(rank[rootA] > rank[rootB]){
            parent[rootB] = rootA;
        }
        else if(rank[rootA] < rank[rootB]){
            parent[rootA] = rootB;
        }
        else{
            parent[rootA] = rootB;
            rank[rootB] += 1;
        }
        
        return;
    }
    
  static int spanningTree(int V, int E, int edges[][]){
      // Code Here. 
      int mincost = 0;
      List<Edge> edge = getEdgeArray(V,edges);
      Arrays.sort(edges);
      
      int i=0;
      int edgesPicked = 0;
      
      int[] parent = new int[V];
      int[] rank = new int[V];
      
      for(int j=0;j<V;j++){
          parent[j] = 0; 
      }
      
      while(edgesPicked<V && i<edge.size()){
          Edge currEdge = edge.get(i);
          int src = currEdge.src;
          int dest = currEdge.dest;
          int weight = currEdge.weight;
          
          int srcRoot = findParentByPathCompression(parent,src);
          int destRoot = findParentByPathCompression(parent,dest);
          
          if(srcRoot != destRoot){
              mincost += weight;
              edgesPicked += 1;
              unionByRank(parent,rank,src,dest);
          }
          
          i+=1;
      }
      return mincost;
  }
  
  static List<Edge> getEdgeArray(int V,int[][] edges){
      List<Edge> edge = new ArrayList<>();
      
      for(int i=0;i<edge.size();i++){
          edge.add(new Edge(edges[i][0],edges[i][1],edges[i][2]));
      }
      
      return edge;
  }
}
