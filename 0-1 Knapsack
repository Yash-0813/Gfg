class Solution: 
    #Function to return max value that can be put in knapsack of capacity W.
    def knapSack(self,W, wt, val, n):
       
        # code here
        return self.maxprofit(wt,val,W,n,0,{})
    def maxprofit(self,wt,val,W,n,currentindex,memo):
        if(currentindex>=n):
            return 0
        
        currentkey=str(currentindex)+"_"+str(W)
        if(currentkey in memo):
            return memo[currentkey]
        
        consider=0
        if(wt[currentindex]<=W):
            consider=val[currentindex]+self.maxprofit(wt,val,W-wt[currentindex],n,currentindex+1,memo)
        
        notconsider=self.maxprofit(wt,val,W,n,currentindex+1,memo)
        memo[currentkey]=max(consider,notconsider)
        return memo[currentkey]


------------------------------------------------------------------------------JAVA_-------------------------------------------------------------------------------------


class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int capacity, int weights[], int values[], int n) 
    { 
         return maxProfit(weights,values,capacity,n,0,new HashMap<String,Integer>());
    } 
    public static int maxProfit(int[] weights,int[] values,int capacity,int n,int currentItem,HashMap<String,Integer> memo)
    {
        if(currentItem >= n)
            return 0;
        
        String currentKey = Integer.toString(currentItem) + "_" + Integer.toString(capacity);
        
        if(memo.containsKey(currentKey))
            return memo.get(currentKey);
        
        int consider = 0;
        if(weights[currentItem] <= capacity){
            consider = values[currentItem] + maxProfit(weights, values, capacity - weights[currentItem], n, currentItem + 1,memo);
        } 
        
        int notConsider = maxProfit(weights, values, capacity, n, currentItem + 1,memo);
        
        memo.put(currentKey,Math.max(consider,notConsider));
        
        return memo.get(currentKey);
    }
}
