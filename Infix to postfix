class Solution {
    // Function to convert an infix expression to a postfix expression.
    public static String infixToPostfix(String s) {
        // Your code here
            // Your code here
    Stack<String> st = new Stack<>();
      
      HashMap<Character,Integer> hm = new HashMap<>();
      hm.put('(',6);
      hm.put('^',5);
      hm.put('/',4);
      hm.put('*',4);
      hm.put('+',3);
      hm.put('-',3);
      
      String ans = "";
      
      for(int i=0;i<s.length();i++){
          char a = s.charAt(i);
          if(a=='('){
              st.push(a+"");
          }
          else if(a==')'){
              while(!st.isEmpty() && st.peek() != "("){
                  ans += st.pop();
              }
          }
          else if(isOperator(a)){
              while(!st.isEmpty() && hm.get(a) <= hm.get(st.peek())){
                  ans += st.pop();
              }
              st.push(a+"");   
          }
          else{
              ans += a;
          }
      }
      
      while(!st.isEmpty()){
          ans += st.pop();
      }
      return ans;
    }
    private static boolean isOperator(Character currentchar){
        return currentchar=='+' || currentchar=='-' || currentchar=='*' || currentchar=='/';
    }
}
