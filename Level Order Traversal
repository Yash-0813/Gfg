class Solution:
    #Function to return the level order traversal of a tree.
    def levelOrder(self,root ):
        # Code here
        a=[]
        q=[]
        q.append(root)
        while (q):
           node=q.pop(0)
           a.append(node.data)
           if node.left:
               q.append(node.left)
           if node.right:
               q.append(node.right)
        return a


________________________________________________________-2 ND Approach Through BFS--------------------------------------------------------------------


class Solution:
    #Function to return the level order traversal of a tree.
    def levelOrder(self,root ):
        # Code here
        answer=[]
        queue=[]
        
        if(root==None):
            return answer
        queue.append(root)
        
        while(queue):
            currentsize=len(queue)
            level=[]
            while(currentsize>0):
                currentnode=(queue.pop(0))
                level.append(currentnode.data)
                currentsize-=1
                
                if(currentnode.left!=None):
                    queue.append(currentnode.left)
                if(currentnode.right!=None):
                    queue.append(currentnode.right)
            for i in level:
                answer.append(i)
            
            
        return answer


-----------------------------------------------------------------------JAVA_----------------------------------------------------------------------------------------


class Solution
{
    //Function to return the level order traversal of a tree.
    static ArrayList <Integer> levelOrder(Node root) 
    {
        // Your code here
        // Steps:-
        // 1-insert an elemt 
        // 2-remove an element from queue
        // 3-add element in answer
        // 4-iterate to its left and right child
        ArrayList<Integer>answer=new ArrayList<>();
        Queue<Node>queue=new LinkedList<>();
        
        //adding first element in  queue for starting while loop
        queue.add(root);
        
        //Starrting bfs
        
        while(!queue.isEmpty()){
            // remove element
            
            Node currentNode=queue.poll();
            
            //adding elemet in answer list
            answer.add(currentNode.data);
            
            //iterating
            if(currentNode.left!=null){
                queue.add(currentNode.left);
            }
            if(currentNode.right!=null){
                queue.add(currentNode.right);
            }
        }
        return answer;
        
    }
}
